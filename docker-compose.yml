services:
  # NFS Server container
  nfs-server:
    image: obeoneorg/nfs-server:latest
    container_name: nfsbench-nfs-server
    privileged: true
    restart: "no"
    environment:
      - NFS_EXPORT_1=/nfsshare *(rw,sync,no_subtree_check,no_root_squash,insecure)
    volumes:
      - nfs-data:/nfsshare
    ports:
      - "2049:2049"
      - "2049:2049/udp"
      - "32111:111"
      - "32111:111/udp"
      - "32765:32765"
      - "32766:32766"
      - "32767:32767"
    networks:
      - nfsbench-network
    healthcheck:
      test: ["CMD", "showmount", "-e", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL with direct storage
  postgresql-direct:
    image: postgres:15-alpine
    container_name: nfsbench-postgres-direct
    restart: "no"
    environment:
      POSTGRES_DB: benchmark_db
      POSTGRES_USER: benchmark_user
      POSTGRES_PASSWORD: benchmark_pass
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres-direct-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - nfsbench-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benchmark_user -d benchmark_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL with NFS storage
  postgresql-nfs:
    image: postgres:15-alpine
    container_name: nfsbench-postgres-nfs
    restart: "no"
    privileged: true
    depends_on:
      nfs-server:
        condition: service_healthy
    environment:
      POSTGRES_DB: benchmark_db
      POSTGRES_USER: benchmark_user
      POSTGRES_PASSWORD: benchmark_pass
      PGDATA: /mnt/nfs/postgresql/data
    volumes:
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      - ./scripts/mount-nfs.sh:/mount-nfs.sh:ro
    ports:
      - "5433:5432"
    networks:
      - nfsbench-network
    entrypoint: |
      sh -c '
        echo "1. Installing NFS utils..." &&
        apk add --no-cache nfs-utils &&
        echo "2. Creating directory..." &&
        mkdir -p /mnt/nfs/postgresql &&
        echo "3. Mounting NFS..." &&
        /mount-nfs.sh nfs-server /nfsshare /mnt/nfs v3 &&
        echo "4. Checking mount..." &&
        ls -la /mnt/nfs/ &&
        echo "4.1. Creating postgresql directory in NFS mount..." &&
        mkdir -p /mnt/nfs/postgresql &&
        echo "4.2. Verifying postgresql directory..." &&
        ls -la /mnt/nfs/postgresql &&
        echo "5. Changing ownership..." &&
        chown -R postgres:postgres /mnt/nfs/postgresql &&
        echo "6. Ownership changed, starting PostgreSQL..." &&
        exec docker-entrypoint.sh postgres
      '
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benchmark_user -d benchmark_db"]
      interval: 15s
      timeout: 10s
      retries: 5

  # MySQL with direct storage
  mysql-direct:
    image: mysql:8.0
    container_name: nfsbench-mysql-direct
    restart: "no"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: benchmark_db
      MYSQL_USER: benchmark_user
      MYSQL_PASSWORD: benchmark_pass
    volumes:
      - mysql-direct-data:/var/lib/mysql
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    networks:
      - nfsbench-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "benchmark_user", "-pbenchmark_pass"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL with NFS storage
  mysql-nfs:
    image: mysql:8.0
    container_name: nfsbench-mysql-nfs
    restart: "no"
    privileged: true
    depends_on:
      nfs-server:
        condition: service_healthy
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: benchmark_db
      MYSQL_USER: benchmark_user
      MYSQL_PASSWORD: benchmark_pass
    volumes:
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      - ./scripts/mount-nfs.sh:/mount-nfs.sh:ro
    ports:
      - "3307:3306"
    networks:
      - nfsbench-network
    entrypoint: |
      sh -c '
        echo "1. Installing NFS common..." &&
        microdnf install -y nfs-utils &&
        echo "2. Creating directory..." &&
        mkdir -p /mnt/nfs/mysql &&
        echo "3. Mounting NFS..." &&
        /mount-nfs.sh nfs-server /nfsshare /mnt/nfs v3 &&
        echo "4. Checking mount..." &&
        ls -la /mnt/nfs/ &&
        echo "4.1. Creating mysql directory in NFS mount..." &&
        mkdir -p /mnt/nfs/mysql &&
        echo "4.2. Verifying mysql directory..." &&
        ls -la /mnt/nfs/mysql &&
        echo "5. Changing ownership..." &&
        chown -R mysql:mysql /mnt/nfs/mysql &&
        echo "6. Ownership changed, starting MySQL..." &&
        exec docker-entrypoint.sh mysqld --datadir=/mnt/nfs/mysql
      '
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "benchmark_user", "-pbenchmark_pass"]
      interval: 15s
      timeout: 10s
      retries: 5

  # SQLite benchmark runner container
  sqlite-runner:
    build:
      context: .
      dockerfile: Dockerfile.sqlite
    container_name: nfsbench-sqlite-runner
    restart: "no"
    privileged: true
    user: root
    depends_on:
      nfs-server:
        condition: service_healthy
    volumes:
      - sqlite-direct-data:/data/direct
      - ./scripts/mount-nfs.sh:/mount-nfs.sh:ro
      - ./sql/init:/sql/init:ro
    networks:
      - nfsbench-network
    entrypoint: |
      sh -c '
        echo "1. NFS utils already installed, skipping..." &&
        echo "2. Creating directory..." &&
        mkdir -p /mnt/nfs/sqlite &&
        echo "3. Mounting NFS..." &&
        /mount-nfs.sh nfs-server /nfsshare /mnt/nfs v3 &&
        echo "4. Checking mount..." &&
        ls -la /mnt/nfs/ &&
        echo "5. SQLite setup complete, keeping container alive..." &&
        sleep infinity
      '

  # Benchmark orchestrator
  benchmark-runner:
    build:
      context: .
      dockerfile: Dockerfile.benchmark
    container_name: nfsbench-runner
    restart: "no"
    privileged: true
    depends_on:
      postgresql-direct:
        condition: service_healthy
      postgresql-nfs:
        condition: service_healthy
      mysql-direct:
        condition: service_healthy
      mysql-nfs:
        condition: service_healthy
      sqlite-runner:
        condition: service_started
    volumes:
      - ./sql:/app/sql:ro
      - ./config:/app/config:ro
      - ./results:/app/results
      - /var/run/docker.sock:/var/run/docker.sock:ro
    working_dir: /app
    networks:
      - nfsbench-network
    environment:
      - POSTGRES_DIRECT_HOST=postgresql-direct
      - POSTGRES_DIRECT_PORT=5432
      - POSTGRES_NFS_HOST=postgresql-nfs
      - POSTGRES_NFS_PORT=5432
      - MYSQL_DIRECT_HOST=mysql-direct
      - MYSQL_DIRECT_PORT=3306
      - MYSQL_NFS_HOST=mysql-nfs
      - MYSQL_NFS_PORT=3306
      - POSTGRES_USER=benchmark_user
      - POSTGRES_PASSWORD=benchmark_pass
      - POSTGRES_DB=benchmark_db
      - MYSQL_USER=benchmark_user
      - MYSQL_PASSWORD=benchmark_pass
      - MYSQL_DB=benchmark_db
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do sleep 30; done"]

volumes:
  nfs-data:
    driver: local
  postgres-direct-data:
    driver: local
  mysql-direct-data:
    driver: local
  sqlite-direct-data:
    driver: local

networks:
  nfsbench-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.200.0/24
